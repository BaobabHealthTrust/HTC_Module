<html>
<head>
  <%= javascript_include_tag 'multi_column_controls' %>
  <script>

      //var cancelDestination = addLink(window, <%#=params[:client_id] %>)
      function __$(id){
          return document.getElementById(id);
      }

      selectAll = false;
  </script>
  <script language="javascript">
      tstUsername = "";
      tstCurrentDate = "2010/03/12";
      tt_cancel_destination = '/';
      tt_cancel_show = 'show.html';

      var risk_category;

      function __$(id){
          return document.getElementById(id);
      }

      function setRiskCategory() {
          <% low_risk = Settings[:low_risk] %>
          <% on_going_risk = Settings[:on_going_risk] %>
          <% high_risk = Settings[:high_risk] %>

          var low_risk = "<%= low_risk.to_s.gsub('"', '') %>";
          var on_going_risk = "<%= on_going_risk.to_s.gsub('"', '') %>";
          var high_risk = "<%= high_risk.to_s.gsub('"', '') %>";

          var yesAnswers = [];
          //################# Populate yesAnswers array ####################
          var checkBoxes = __$('page' + tstCurrentPage).getElementsByTagName("img");
          for(var i in checkBoxes){
              var box = checkBoxes[i];
              if(box.src && !box.src.match(/unticked/)){
                  var yesAnswer = box.parentNode.parentNode.childNodes[1].innerHTML;
                  yesAnswers.push(yesAnswer);
              }
          }
          //################# Loop through yesAnswers array to get Risk Category. #####
          var risk_type = []
          var risk_type = 'Risk assessment not done';
          for(var yes in yesAnswers){
              if (high_risk.indexOf(yesAnswers[yes]) > -1){
                  risk_type = 'High risk event';
                  break;
              }
              else if (on_going_risk.indexOf(yesAnswers[yes]) > -1){
                  risk_type = 'On-going Risk';
              }
              else if (low_risk.indexOf(yesAnswers[yes]) > -1){
                  if (risk_type != "on_going") {
                      risk_type = 'Low Risk';
                  }
              }
          }
          //######### Get Risk Type ###################
          risk_category = risk_type;
          /*
              ['Low Risk','Low Risk'],
              ['On-going Risk','AVD+ or High Risk'],
              ['High risk event','High risk event in last 3 months'],
              ['Risk assessment not done','Risk assessment not done']
          */
      }

      function getRiskCategory() {
          var risk_type = risk_category;
          var keyboard = document.getElementById('keyboard');

          __$('touchscreenInput' + tstCurrentPage).value = risk_type;          
          keyboard.style.display = 'none';
          return risk_type;
      }


  </script>
  <style>
    #parent0 {
        height: 100%;
        position: absolute;
    }

    #keyboard, .keyboard {
        display: none;
    }
    li {
        font-size: 2em;
    }
  </style>
</head>
<body>
    <form method = "post" action = "/encounters/new/<%= params[:client_id] %>">
      <input type="hidden" value="<%= form_authenticity_token() %>" name="authenticity_token"/>
      <input type="hidden" value="COUNSELING" name="ENCOUNTER"/>
      <%= select_tag 'obs',
                     options_for_select(@protocol.collect{ |p|
                                          [p.name, p.name]
                                        }, []),
                     :id => "protocols",
                     :helpText => "Assessment: #{@client.name.split.map(&:capitalize).join(' ')} &nbsp;&nbsp;&nbsp;(Tick if answer is 'YES'.)",
                     :tt_onLoad =>"createMultipleSelectControl()",
                     :tt_onUnLoad => "setRiskCategory();",
                     :multiple =>  true %>

      <%= text_field_tag "observations[][value_coded_or_text]", params[:risk_assessment],
                         {:id => 'risk_assessment', :field_type => 'alpha',
                          :helpText =>"Risk Assessment Outcome for #{@client.name.split.map(&:capitalize).join(' ')}",
                          :allowFreeText => false,
                          :condition => '$("protocols").value == "" || skipped[tstCurrentPage] == 1',
                          :tt_onLoad => "getRiskCategory(); updateTouchscreenInputForSelect(this);" } %>

      <%= hidden_field_tag("observations[][concept_name]",        "Client Risk Category") %>

      <%= select_tag("observations[][value_coded_or_text]",
                     options_for_select(['',
                                         ['Yes','Yes'],
                                         ['No','No']
                                        ],
                                        nil),
                     :helpText =>"Continue Testing #{@client.name.split.map(&:capitalize).join(' ')}?",
                     :allowFreeText => false)
      %>
      <%= hidden_field_tag("observations[][concept_name]",        "Testing") %>
      <%= hidden_field_tag("observations[][patient_id]",         @client.id) %>
      <%= hidden_field_tag("observations[][obs_datetime]",       "") %>
      <%= hidden_field_tag("observations[][value_datetime]",       "") %>
    </form>
</body>
</html>
